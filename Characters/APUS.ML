// Space is also a separator in 'APUS'
#APUS = > "Assimilate Pictext Unicode Syntactically"(
$Pictext
{
    Pictext Name Translation Explanation
        ✔ Check Yes
        ✖ Cross No
        ∀ UniversalQuantifier Self
                    e #r8 Enumerate 10sor ~TensorFlow.ts 4m @Format 0fig Configuration +
        : Type prototype new - d$d Undefined πr Pytorch Torch + 1t Property ∞ Infinite 
        ² Square 2D |
        or choice
               &and multi
        ↔ Invert change
        → Arrow ltr
        《》 EntangledSuperposition Concurrent
        © Copyright 
        ° Degree 
        '' String
        "" Array;
Index:
    vertex... matrix
        . :.Vermatrix ::Tetris
        :. : Tetramatrix
        .·.Therefore
        ·.· Whereas() RejectiveBrackets
    {
    }
    SubjectiveBrackets
        [] ObjectiveBrackets<>
            InjectiveBrackets
                .Sentence !Express
        ? Quest = Equal == Eval % / 100 Percent
        · Dot Г Begin
        ¬ Next
}
#include <iostream>
#include <map>
#include <iomanip>

class PrefixSuffixRoot
{
public:
    void displayPrefixes()
    {
        std::map<std::string, std::string> prefixes = {
            {"ab-, a-, abs-", "away from"},
            {"a-, an-", "not, less, without"},
            {"ad-, a-, ac-, af-", "to, toward"},
            {"ag-, al-, an-", "aggressor, allude, annex"},
            {"ap-, ar-, as-, at-", "to, toward"},
            {"ante-", "before"},
            {"anti-, ant-", "against"},
            {"ana-", "up, through, throughout"},
            {"be-", "by or near, below, beside"},
            {"bene-", "good, well"},
            {"bi-", "two, twice"},
            {"circum-", "around, all round"},
            {"com-, con-, col-", "together"},
            {"contra-", "against"},
            {"de", "from, down away"},
            {"dis-, di-", "apart, apart from"},
            {"ex-, ef-, e-", "out, out of"},
            {"hypo-", "under, beneath"},
            {"in-, im-, il-, ir-, un-", "not"},
            {"inter-", "between"},
            {"intra-, intro-", "within"},
            {"mal-", "bad"},
            {"mis-", "wrong"},
            {"non-", "not"},
            {"ob-", "against"},
            {"par-, para-", "beside, beyond"},
            {"per-", "through, throughout"},
            {"peri-", "around"},
            {"post", "after"},
            {"pre-", "before"},
            {"pro-", "before, forward"},
            {"re-", "back, again"},
            {"retro-", "backward"},
            {"se-", "apart"},
            {"semi-", "half"},
            {"sub-", "under"},
            {"super-, supra-", "above, over"},
            {"syn-, sym-", "with"},
            {"trans-, tra-", "across"},
            {"un-", "not"},
            {"uni-", "single"},
            {"vice-", "instead of"},
            {"with-", "against, back"}};

        for (const auto &prefix : prefixes)
        {
            std::cout << "Prefix: " << std::setw(20) << prefix.first << "Meaning: " << prefix.second << std::endl;
        }
    }

    void displaySuffixes()
    {
        std::map<std::string, std::string> suffixes = {
            {"-able, -ible, -ble", "capable of being"},
            {"-ac, -ic", "pertaining to"},
            {"-acious", "characterized by"},
            {"-acity", "quality of"},
            {"-асу", "having the quality of"},
            {"-age", "collection of, state of being"},
            {"-al, -el,-le", "pertaining to"},
            {"-an, -ian", "belonging to, one who"},
            {"-ance", "relating to"},
            {"-ancy, -ency", "denoting state or quality"},
            {"-ant, -ent", "one who"},
            {"-ar, -ary, ory", "relating to"},
            {"-ate", "act"},
            {"-ation", "action"},
            {"-cle, -ule, -ling", "diminutive"},
            {"-cracy", "rule"},
            {"-cy", "quality"},
            {"-dom", "state of being"},
            {"-ee", "one who is acted upon"},
            {"-ence", "relating to"},
            {"-er, -or, -ar", "one who"},
            {"-ful", "abounding in"},
            {"-fy, -efy, -ify", "to make"},
            {"-hood", "condition"},
            {"-ic", "pertaining to"},
            {"-ice", "act of"},
            {"-il, -ile", "pertaining to, capable of being"},
            {"-ity", "state or condition"},
            {"-ious", "full of"},
            {"-ist", "one who"},
            {"-ity", "state or condition"},
            {"-ize, -yze", "to make like"},
            {"-less", "without"},
            {"-ly", "manner, like"},
            {"-ment", "result"},
            {"-meter", "measurement"},
            {"-ness", "state of being"},
            {"-nomy", "pertaining to laws or government"},
            {"-ory", "place where"},
            {"-ous, -ious, -eous, -uous", "full of"},
            {"-ose", "full of"},
            {"-ship", "state or quality"},
            {"-some", "like, full of"},
            {"-ster", "one who"},
            {"-sion, -tion", "act or state of being"},
            {"-tude", "condition"},
            {"-ty", "condition"},
            {"-ule", "little"},
            {"-ure", "act of"},
            {"-ward", "direction of course"},
            {"-y", "full of, characterized by"}};

        for (const auto &suffix : suffixes)
        {
            std::cout << "Suffix: " << std::setw(20) << suffix.first << "Meaning: " << suffix.second << std::endl;
        }
    }

    void displayRoots()
    {
        std::map<std::string, std::string> roots = {
            {"aero", "air"},
            {"ag, ac", "to do"},
            {"agr, agri, agro", "farm"},
            {"anthropo", "man"},
            {"aqua", "water"},
            {"arch", "rule, principle, chief"},
            {"astra, astro", "star"},
            {"aud, audi, audio", "hearing"},
            {"auto", "self, oneself"},
            {"biblio, bib", "book"},
            {"bio", "life"},
            {"cad, cas", "fall"},
            {"cant", "sing"},
            {"cap, cep", "take"},
            {"capit", "head"},
            {"cat, cath", "down, through"},
            {"ced, cess", "go, yield"},
            {"cide, cis", "kill, cut"},
            {"clud, clus", "close"},
            {"cred", "believe"},
            {"dec, ten", "decimal"},
            {"dem", "people"},
            {"dent", "tooth"},
            {"derm", "skin"},
            {"dic, dict", "say, speak"},
            {"duc", "lead"},
            {"equ", "equal"},
            {"fac, fec", "make, do"},
            {"fring", "break"},
            {"fract", "break"},
            {"frater", "brother"},
            {"fund, fus", "pour"},
            {"gam, gamos", "marriage"},
            {"gen", "produce"},
            {"geo", "earth"},
            {"gastro, gast", "stomach"},
            {"greg", "group"},
            {"gress, grad", "walking, moving"},
            {"gyn", "woman"},
            {"hemo", "blood"},
            {"homo", "man, same"},
            {"hydr", "water"},
            {"idio", "own, private"},
            {"iso", "equal"},
            {"ject", "throw"},
            {"jud, jur", "right"},
            {"logy", "study of"},
            {"loqu", "speak"},
            {"mand", "order"},
            {"manu", "hand"},
            {"mater", "mother"},
            {"meter", "measure"},
            {"micro", "small"},
            {"mit, mis", "send"},
            {"mono, mon", "single, one"},
            {"mort", "death"},
            {"nom", "law"},
            {"onym", "name"},
            {"pathos", "feeling"},
            {"philo", "love"},
            {"phobia", "fear"},
            {"porto", "carry"},
            {"pseudo", "false"},
            {"psych", "mind"},
            {"scope", "see"},
            {"scrib", "write"},
            {"sec", "cut"},
            {"sens", "feel"},
            {"sequ", "follow"},
            {"spec", "look"},
            {"spir", "breath"},
            {"stat", "stand"},
            {"ten", "hold"},
            {"term", "end"},
            {"typ", "print"},
            {"ven, vent", "come"},
            {"vert, vers", "turn"},
            {"vict", "conquer"},
            {"vid, vis", "see"},
            {"voc", "call"}};

        for (const auto &root : roots)
        {
            std::cout << "Root: " << std::setw(20) << root.first << "Meaning: " << root.second << std::endl;
        }
    }
};

int main()
{
    PrefixSuffixRoot prefixSuffixRoot;
    prefixSuffixRoot.displayPrefixes();
    prefixSuffixRoot.displaySuffixes();
    prefixSuffixRoot.displayRoots();

    return 0;
}

)
